{
  "ui": {},
  "change": "- The `ProposalCreated` event is now emitted with the correct start and end date if 0 is used as an input parameter.\n- The ability to create a proposal now depends on the membership status of the current instead of the snapshot block.",
  "pluginSetup": {
    "prepareInstallation": {
      "description": "The information required for the installation.",
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MajorityVotingBase.VotingMode",
              "name": "votingMode",
              "type": "uint8",
              "description": "A parameter to select the vote mode. In standard mode (0), early execution and vote replacement are disabled. In early execution mode (1), a proposal can be executed early before the end date if the vote outcome cannot mathematically change by more voters voting. In vote replacement mode (2), voters can change their vote multiple times and only the latest vote option is tallied."
            },
            {
              "internalType": "uint32",
              "name": "supportThreshold",
              "type": "uint32",
              "description": "The support threshold value. Its value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`."
            },
            {
              "internalType": "uint32",
              "name": "minParticipation",
              "type": "uint32",
              "description": "The minimum participation value. Its value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`."
            },
            {
              "internalType": "uint64",
              "name": "minDuration",
              "type": "uint64",
              "description": "The minimum duration of the proposal vote in seconds."
            },
            {
              "internalType": "uint256",
              "name": "minProposerVotingPower",
              "type": "uint256",
              "description": "The minimum voting power required to create a proposal."
            }
          ],
          "internalType": "struct MajorityVotingBase.VotingSettings",
          "name": "votingSettings",
          "type": "tuple",
          "description": "The voting settings that will be enforced when proposals are created."
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address",
              "description": "The voting token contract address."
            },
            {
              "internalType": "uint256",
              "name": "underlyingTotalSupply",
              "type": "uint256",
              "description": "Total supply of underlying token in voting token."
            }
          ],
          "internalType": "struct TokenVotingPluginSetup.TokenSettings",
          "name": "tokenSettings",
          "type": "tuple",
          "description": "The token settings that either specify an existing ERC-20 token (`token = address(0)`) or the name and symbol of a new `GovernanceERC20` token to be created."
        }
      ],
      "prepareUpdate": {
        "1": {
          "description": "No input is required for the update.",
          "inputs": []
        }
      },
      "prepareUninstallation": {
        "description": "No input is required for the uninstallation.",
        "inputs": []
      }
    }
  }
}
